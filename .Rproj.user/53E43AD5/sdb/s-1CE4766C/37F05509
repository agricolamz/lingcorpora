{
    "collab_server" : "",
    "contents" : "#' Post query to the National Corpus of Polish (nkjp.pl). Don't forget to check http://nkjp.pl/poliqarp/help/plse3.html#x4-50003 for advanced query language.\n#' @param query Vector of length 1 which contain query.\n#' @param tag Logical. Do you need morphological tags? By default is FALSE.\n#' @param n_results Integer. Define number of examples from the corpus. By default is 100\n#' @param corpus vector with a type of the corpus: \"nkjp300\", \"nkjp1800\", \"nkjp1M\", \"ipi250\", \"ipi030\", \"frequency-dictionary\"\n#' @author George Moroz <agricolamz@gmail.com>\n#' @examples\n#' pl_corpus(\"boisz się\")\n#' pl_corpus(\"boisz się\", tag = T, n.results = 40)\n#' pl_corpus(\"An*a\")\n#' pl_corpus(\"[base = 'strzyc']\")\n#' @export\n#' @import rvest\n#' @import httr\n#' @import xml2\n\npl_corpus <- function(query, tag = F, n_results = 100, corpus = \"nkjp300\"){\n    if(length(query) != 1){\n      warning('x must be of length 1. If you want a dataframe with different queries try \\n do.call(\"rbind.data.frame\", sapply(x, pl.corpus, simplify = F))')\n    }\n    # show tags?\n    if(tag == T){\n      tag.variable <- \"slt\"\n    } else {tag.variable <- \"s\"}\n\n    # set nkjp.pl settings\n    settings <- httr::POST(url = \"http://nkjp.pl/poliqarp/settings/\",\n                           body = list(\n                             random_sample = \"0\",\n                             random_sample_size = \"50\",\n                             sort_column = \"rm\",\n                             sort_type = \"afronte\",\n                             sort_direction = \"asc\",\n                             show_in_match = tag.variable,\n                             show_in_context = tag.variable,\n                             left_context_width = \"10\",\n                             right_context_width = \"10\",\n                             wide_context_width = \"50\",\n                             results_per_page = as.character(n_results),\n                             `next` = \"/poliqarp/\"))\n\n    # get request data\n    request <- httr::POST(url = \"http://nkjp.pl/poliqarp/query/\",\n                          body = list(query = query, corpus = corpus),\n                          set_cookies(domain = \"#HttpOnly_nkjp.pl\",\n                                      flag = \"FALSE\",\n                                      path = \"/\",\n                                      secure = \"FALSE\",\n                                      expiration = \"<NA>\",\n                                      name = \"sessionid\",\n                                      value = as.character(settings$cookies[7]))) # cookies from settings\n\n    # get data\n    my.url <- httr::GET(url = \"http://nkjp.pl/poliqarp/nkjp300/query/\",\n                        set_cookies(domain = \"#HttpOnly_nkjp.pl\",\n                                    flag = \"FALSE\",\n                                    path = \"/\",\n                                    secure = \"FALSE\",\n                                    expiration = \"<NA>\",\n                                    name = \"sessionid\",\n                                    value = as.character(request$cookies[7]))) # cookies from request\n\n    # check for errors\n    xml2::read_html(my.url) %>%\n      html_nodes(\".errorlist > li:nth-child(1)\") %>%\n      html_text() ->\n      errorlist\n\n    if(length(errorlist) > 0){\n      warning(errorlist)\n    }\n\n    # check for no result\n    xml2::read_html(my.url) %>%\n      html_nodes(\".query-results > p:nth-child(2)\") %>%\n      html_text() ->\n      number.results\n    if(length(number.results) > 1){\n      if(grepl(pattern = \"Found 0 results\", number.results)){\n        warning(paste('No results were returned by the query \"', query, '\"', sep = \"\"))\n      }}\n\n\n    # get left part\n    xml2::read_html(my.url) %>%\n      html_nodes(\"td:nth-child(2)\") %>%\n      html_text() ->\n      left.part\n    left.part <- gsub(\"\\\\s+\", \" \", left.part) # clean data\n\n    # get query word\n    xml2::read_html(my.url) %>%\n      html_nodes(\"td:nth-child(3)\") %>%\n      html_text() ->\n      center.part\n    center.part <- gsub(\"\\\\s+\", \" \", center.part) # clean data\n\n    # get right part\n    xml2::read_html(my.url) %>%\n      html_nodes(\"td:nth-child(4)\") %>%\n      html_text() ->\n      right.part\n    right.part <- gsub(\"\\\\s+\", \" \", right.part) # clean data\n\n    results <- data.frame(left.part, center.part, right.part, stringsAsFactors = F)\n    return(results)}\n# end of the function\n",
    "created" : 1479487396739.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3520385561",
    "id" : "37F05509",
    "lastKnownWriteTime" : 1479487218,
    "last_content_update" : 1479487218,
    "path" : "~/_DATA/OneDrive1/_Work/github/lingcorpora/lingcorpora.R/R/pl_corpus.R",
    "project_path" : "R/pl_corpus.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}