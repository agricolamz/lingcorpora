{
    "collab_server" : "",
    "contents" : "---\ntitle: \"lingcorpora: get data from different corpora\"\nauthor: \"A. Koshevoy, G. Moroz\"\noutput:\n  html_document:\n    theme: lumen\n    highlight: tango\n    toc: yes\n    toc_position: right\n    toc_float: yes\n    smooth_scroll: false\n    number_sections: true\n---\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message=F, warning = F)\n```\n\n\n# About lingcorpora\n`lingcorpora` package provides R with API from different linguistic corpora. A tutorial for this package is avaliable on GitHub wiki. This package includes APIs for:\n\n* [Abkhaz Text Corpus](http://baltoslav.eu/apsua/index.php)\n* [Avar Text Corpus](http://baltoslav.eu/avar/index.php)\n* [National Corpus of Polish](nkjp.pl)\n* [National Corpus of Russian Language](http://www.ruscorpora.ru/)\n\n```{r, echo=FALSE}\nlibrary(lingtypology)\nmap.feature(c(\"Abkhazian\", \"Avar\", \"Polish\", \"Russian\"))\n```\n\n# Instalation {.tabset .tabset-fade .tabset-pills}\n## R version\nGet the last version from GitHub:\n```{r, eval = F}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"agricolamz/lingcorpora.R\", dependencies = TRUE)\n```\n\nLoad a library:\n```{r}\nlibrary(lingcorpora)\n```\n\n## Python version\nIf you want to install our package, please tap the following command in Terminal:\n```{bash, eval = F}\npip3 install git+https://github.com/alexeykosh/lingcorpora.py\n```\n\nFor import it in your project, tap:\n```{python, engine.path = '/usr/bin/python3'}\nimport lingcorpora\n```\n\nADD about python3!!!\n\n# Usage\nMost of the functions in `lingcorpora` have the same syntax: first part is a language iso code, the second part is `_corpus`.\n\n## Abkhaz Text Corpus {.tabset .tabset-fade .tabset-pills}\n\n### R version\nThe basic function for searching in Abkhaz Text Corpus is `abk_corpus`. This function creates a dataframe with a results from the corpus. The function `abk_corpus` have a lot of arguments (as in all R function, it is not obligatory to write names of the arguments):\n\n* **`query`** --- the sole obligatory argument with your query. I will use library `DT` for data frame visualization, but it is not necessary\n```{r}\ndf <- abk_corpus(query = \"бызшәа\")\nlibrary(DT)\ndatatable(head(df), options = list(dom = 'tip'))\n```\n* **`kwic`** (key word in context) is the format for resulted lines. If TRUE, then it returns a dataframe with query in the middle and left and right contexts. If FALSE, then it returns each result in one string. By default is TRUE.\n```{r}\ndf <- abk_corpus(query = \"бызшәа\", kwic = FALSE)\nhead(df)\n```\n* **`write`** argument writes a file in the working derictory. If FALSE, then it creates a dataframe in Global Environment. Otherwise function writes a .tsv file with the name frome the argument value. By default is FALSE.\n```{r, eval=FALSE}\nabk_corpus(query = \"бызшәа\", write = \"myquiry\")\n```\n\nThe **`query`** argument can be filled with regular expressions or CQL (corpus query language), read more at the [help page](http://baltoslav.eu/apsua/index.php)\n```{r}\ndf <- abk_corpus(query = \"бызшәа*\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n### Python version\n\n## Avar Text Corpus {.tabset .tabset-fade .tabset-pills}\n\n### R version\nThe basic function for searching in Avar Text Corpus is `ava_corpus`. This function creates a dataframe with a results from the corpus. The function `ava_corpus` have a lot of arguments (as in all R function, it is not obligatory to write names of the arguments):\n\n* **`query`** --- the sole obligatory argument with your query\n```{r}\ndf <- ava_corpus(query = \"шагьар\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n* **`kwic`** (key word in context) is the format for resulted lines. If TRUE, then it returns a dataframe with query in the middle and left and right contexts. If FALSE, then it returns each result in one string. By default is TRUE.\n```{r}\ndf <- ava_corpus(query = \"вацазе\", kwic = FALSE)\nhead(df)\n```\n* **`write`** argument writes a file in the working derictory. If FALSE, then it creates a dataframe in Global Environment. Otherwise function writes a .tsv file with the name frome the argument value. By default is FALSE.\n```{r, eval=FALSE}\nava_corpus(query = \"васазе\", write = \"myquiry\")\n```\n\nThe **`query`** argument can be filled with regular expressions or CQL (corpus query language), read more at the [help page](http://baltoslav.eu/avar/index.php)\n```{r}\ndf <- ava_corpus(query = \"магIарул*\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n### Python version\n\n## National Corpus of Polish {.tabset .tabset-fade .tabset-pills}\n\n### R version\nThe basic function for searching in National Corpus of Polish is `pol_corpus`. This function creates a dataframe with a results from the corpus. The function `pol_corpus` have a lot of arguments (as in all R function, it is not obligatory to write names of the arguments):\n\n* **`query`** --- the sole obligatory argument with your query\n```{r}\ndf <- pol_corpus(query = \"tata\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n* **`tag`** --- if TRUE all the words in a result will have morphological tags\n```{r}\ndf <- pol_corpus(query = \"tata\", tag = TRUE)\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n* **`n_results`** defines number of examples from the corpus. By default is 10.\n```{r}\ndf <- pol_corpus(query = \"tata\", n_results = 6)\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n* **`corpus`** --- vector with a type of the corpus: \"nkjp300\", \"nkjp1800\", \"nkjp1M\", \"ipi250\", \"ipi030\", \"frequency-dictionary\"\n```{r}\ndf <- pol_corpus(query = \"tata\", corpus = \"nkjp1M\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n* **`kwic`** (key word in context) is the format for resulted lines. If TRUE, then it returns a dataframe with query in the middle and left and right contexts. If FALSE, then it returns each result in one string. By default is TRUE.\n```{r}\ndf <- pol_corpus(query = \"tata\", kwic = FALSE)\nhead(df)\n```\n* **`write`** argument writes a file in the working derictory. If FALSE, then it creates a dataframe in Global Environment. Otherwise function writes a .tsv file with the name frome the argument value. By default is FALSE.\n```{r, eval=FALSE}\npol_corpus(query = \"tata\", write = \"myquiry\")\n```\n\nThe **`query`** argument can be filled with regular expressions or CQL (corpus query language), read more at the [help page](http://nkjp.pl/poliqarp/help/plse3.html#x4-50003):\n\n```{r}\ndf <- pol_corpus(\"An*a\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n```{r}\ndf <- pol_corpus(\"[base = 'strzyc']\")\ndatatable(head(df), options = list(dom = 'tip'))\n```\n\n### Python version\n```{python, engine.path = '/usr/bin/python3'}\nfrom lingcorpora import pl_search as pl_corpus\nprint(pl_corpus(\"tata\"))\n```\n## National Corpus of Russian Language {.tabset .tabset-fade .tabset-pills}\n\n### R version\n\n### Python version\n",
    "created" : 1482567495569.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4231259007",
    "id" : "D8E21F5A",
    "lastKnownWriteTime" : 1482567497,
    "last_content_update" : 1482567497299,
    "path" : "~/_DATA/OneDrive1/_Work/github/lingcorpora/README.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}